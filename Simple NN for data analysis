{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "xE5Gn70v6wUf"
      },
      "outputs": [],
      "source": [
        "from IPython.display import clear_output"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Predicting the median value of houses of california houses using NN (regression)\n",
        "\n",
        "The dataset contains the following features about houses.\n",
        "\n",
        "- MedInc (Median Income): Median income for households within a district.\n",
        "- HouseAge: Median age of housing in the district.\n",
        "- AveRooms: Average rooms per household.\n",
        "- AveBedrms: Average bedrooms per household.\n",
        "- Population: Total population in the district.\n",
        "- AveOccup: Average household occupancy.\n",
        "- Latitude: Latitude coordinate for the district.\n",
        "- Longitude: Longitude coordinate for the district.\n",
      ],
      "metadata": {
        "id": "iF8BecbF-sYi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from sklearn.datasets import fetch_california_housing\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import matplotlib.pyplot as plt\n",
        "import torch.nn.functional as F\n",
        "from tqdm import tqdm\n",
        "from sklearn.metrics import r2_score\n",
        "import numpy as np\n",
        "!pip install torcheval\n",
        "from torcheval.metrics.functional import r2_score"
      ],
      "metadata": {
        "id": "P7AsCKsg7AjX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b7756b85-c54f-4904-f835-41fefd86dac5"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: torcheval in /usr/local/lib/python3.10/dist-packages (0.0.7)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torcheval) (4.12.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "california_data = fetch_california_housing()"
      ],
      "metadata": {
        "id": "C5Im73jBBkG3"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(california_data.feature_names)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mD5OVXW5ERFC",
        "outputId": "d3fce0db-dfd9-43de-ad82-01a95a7f8657"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup', 'Latitude', 'Longitude']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(california_data.target_names)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3hIx5WgHEUa1",
        "outputId": "cebd9fe4-c03b-4a32-c2e8-ecbbc88d5838"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['MedHouseVal']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data preprocessing"
      ],
      "metadata": {
        "id": "hxU-RD7GYx5C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# These are numpy arrays\n",
        "data = california_data['data']\n",
        "target = california_data['target']\n",
        "\n",
        "# normalising within the array and reshaping it also\n",
        "scaler = StandardScaler()\n",
        "data = scaler.fit_transform(data)\n",
        "target = scaler.fit_transform(target.reshape(-1, 1))\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(data, target, test_size=0.3, random_state=123)\n",
        "\n",
        "# Let's convert them to torch tensors.\n",
        "x_train, x_test, y_train, y_test = [torch.Tensor(d) for d in [x_train, x_test, y_train, y_test]]"
      ],
      "metadata": {
        "id": "BsnRRYz78YiI"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_train.shape)\n",
        "print(y_train.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "shodzcys-iF2",
        "outputId": "ffe452b8-3863-4e8b-fecc-6458714e0da4"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([14448, 8])\n",
            "torch.Size([14448, 1])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Making the neural network"
      ],
      "metadata": {
        "id": "4Tf6pn0fZLoX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ni = x_train.shape[1]\n",
        "nh1 = 20\n",
        "nh2 = 10\n",
        "no = 1\n",
        "lr = 0.01\n",
        "\n",
        "class NN(nn.Module):\n",
        "    def __init__(self, ni, nh1,nh2, no):\n",
        "        super().__init__()\n",
        "        self.fc1 = nn.Linear(ni,nh1)\n",
        "        self.fc2 = nn.Linear(nh1, nh2)\n",
        "        self.fc3 = nn.Linear(nh2, no)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = torch.relu(self.fc1(x))\n",
        "        x = torch.relu(self.fc2(x))\n",
        "        x = self.fc3(x)\n",
        "\n",
        "        return x  # to remove extra dimension\n",
        "\n",
        "net = NN(ni,nh1,nh2,no)\n",
        "\n",
        "# setting the processing to go through the gpu\n",
        "\n",
        "device = torch.cuda if torch.cuda.is_available() else torch.device('cpu')\n",
        "net.to(device)\n",
        "\n",
        "#training the NN\n",
        "num_iter = 150\n",
        "opt = optim.SGD(net.parameters(), lr=0.01, momentum=0.5)  # stochastic gradient descent applied"
      ],
      "metadata": {
        "id": "RRlGTOfMZK6J"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_losses = []\n",
        "test_r2_values = []\n",
        "test_losses = []\n",
        "\n",
        "\n",
        "for i in tqdm(range(num_iter)):\n",
        "    net.train()  # set the network to training mode\n",
        "    running_loss = 0.0\n",
        "    sum_errors = 0.0\n",
        "    total_samples = 0.0\n",
        "    r2_total = 0\n",
        "    iters = 0\n",
        "    # print(net.state_dict())\n",
        "    for i in range(0, len(x_train)-64, 64):\n",
        "      inputs = x_train[i:i+64].to(device)\n",
        "      labels = y_train[i:i+64].to(device)\n",
        "\n",
        "\n",
        "      # print(inputs.shape)\n",
        "      # print(labels.shape)\n",
        "\n",
        "      outputs = net(inputs)  # forward pass\n",
        "      loss = F.mse_loss(outputs, labels)  # loss\n",
        "\n",
        "      opt.zero_grad()\n",
        "      loss.backward()  # back pass\n",
        "      opt.step()\n",
        "      iters += 1\n",
        "      running_loss += loss.item()\n",
        "\n",
        "    iter_train_loss = running_loss / iters\n",
        "    train_losses.append(iter_train_loss)\n",
        "\n",
        "    # Testing phase\n",
        "    net.eval()  # set the network to evaluation mode\n",
        "    test_loss = 0.0\n",
        "    iters = 0\n",
        "    with torch.no_grad():\n",
        "      inputs = x_test.to(device)\n",
        "      labels = y_test.to(device)\n",
        "      outputs = net(inputs)\n",
        "      loss = F.mse_loss(outputs, labels)\n",
        "      test_loss += loss.item()\n",
        "      r2_total = r2_score(labels, outputs)\n",
        "\n",
        "     # Calculating the R-squared score\n",
        "    test_r2_values.append(r2_total)\n",
        "    # print(r2_total)\n",
        "\n",
        "    iter_test_loss = test_loss\n",
        "    test_losses.append(iter_test_loss)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1JUd3wvjcDH-",
        "outputId": "88b95668-1094-4494-f9d8-ddf55ce256f8"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 150/150 [00:41<00:00,  3.63it/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "71wbLRumDGp_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"{test_r2_values}\")\n",
        "\n",
        "print(train_losses)\n",
        "print(test_losses)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GdD56z-JmYYx",
        "outputId": "f7678f34-088d-49de-dbfd-24abb8d6177a"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[tensor(0.7137), tensor(0.7165), tensor(0.7146), tensor(0.7167), tensor(0.7150), tensor(0.7194), tensor(0.7156), tensor(0.7179), tensor(0.7169), tensor(0.7190), tensor(0.7174), tensor(0.7192), tensor(0.7199), tensor(0.7175), tensor(0.7182), tensor(0.7191), tensor(0.7183), tensor(0.7213), tensor(0.7196), tensor(0.7223), tensor(0.7231), tensor(0.7230), tensor(0.7234), tensor(0.7240), tensor(0.7226), tensor(0.7262), tensor(0.7242), tensor(0.7261), tensor(0.7259), tensor(0.7285), tensor(0.7262), tensor(0.7292), tensor(0.7269), tensor(0.7291), tensor(0.7297), tensor(0.7283), tensor(0.7301), tensor(0.7279), tensor(0.7289), tensor(-0.0797), tensor(0.6113), tensor(0.7153), tensor(0.7226), tensor(0.7213), tensor(0.7251), tensor(0.7250), tensor(0.7272), tensor(0.7290), tensor(0.7302), tensor(0.7286), tensor(0.7302), tensor(0.7303), tensor(0.7312), tensor(0.7317), tensor(0.7326), tensor(0.7326), tensor(0.7344), tensor(0.7346), tensor(0.7358), tensor(0.7356), tensor(0.7374), tensor(0.7356), tensor(0.7384), tensor(0.7370), tensor(0.7387), tensor(0.7384), tensor(0.7394), tensor(0.7386), tensor(0.7398), tensor(0.7397), tensor(0.7412), tensor(0.7396), tensor(0.7419), tensor(0.7402), tensor(0.7399), tensor(0.7420), tensor(0.7406), tensor(0.7445), tensor(0.7410), tensor(0.7421), tensor(0.7419), tensor(0.7417), tensor(0.7418), tensor(0.7419), tensor(0.7419), tensor(0.7438), tensor(0.7425), tensor(0.7429), tensor(0.7441), tensor(0.7433), tensor(0.7431), tensor(0.7437), tensor(0.7442), tensor(0.7441), tensor(0.7442), tensor(0.7439), tensor(0.7439), tensor(0.7451), tensor(0.7440), tensor(0.7442), tensor(0.7457), tensor(0.7443), tensor(0.7454), tensor(0.7451), tensor(0.7457), tensor(0.7455), tensor(0.7462), tensor(0.7462), tensor(0.7459), tensor(0.7466), tensor(0.7466), tensor(0.7468), tensor(0.7467), tensor(0.7474), tensor(0.7472), tensor(0.7473), tensor(0.7450), tensor(0.7467), tensor(0.7468), tensor(0.7466), tensor(0.7472), tensor(0.7471), tensor(0.7469), tensor(0.7479), tensor(0.7474), tensor(0.7479), tensor(0.7477), tensor(0.7482), tensor(0.7486), tensor(0.7494), tensor(0.7495), tensor(0.7499), tensor(0.7496), tensor(0.7502), tensor(0.7493), tensor(0.7506), tensor(0.7506), tensor(0.7506), tensor(0.7513), tensor(0.7508), tensor(0.7517), tensor(0.7514), tensor(0.7516), tensor(0.7518), tensor(0.7515), tensor(0.7519), tensor(0.7517), tensor(0.7517), tensor(0.7518), tensor(0.7521)]\n",
            "[0.23928678827153313, 0.23875938137372335, 0.23821299062834847, 0.23766157256232368, 0.23710327648454244, 0.2366651298933559, 0.23609536326593822, 0.2356088274055057, 0.23503531141413583, 0.23454475439257091, 0.23413584225707584, 0.23370073166158464, 0.23299448606040743, 0.23270550260941186, 0.23231025046772427, 0.23176667604181503, 0.2314253655738301, 0.2309175768494606, 0.23058656917677986, 0.23011335922612083, 0.2298760172393587, 0.22938116606738831, 0.2291582265827391, 0.22866355607906977, 0.22841962814331054, 0.2279997757077217, 0.2277310068408648, 0.22733364108535978, 0.22721296432945465, 0.22680045204030144, 0.2267609550555547, 0.22634000662300321, 0.22617688172393374, 0.2258536273241043, 0.22550511482689115, 0.22552688363525603, 0.22521650506390464, 0.22506415681706535, 0.2247378909256723, 0.24644966410266028, 0.26475859224796294, 0.26130411085155275, 0.23861962838305367, 0.23608442107836405, 0.23486955440706678, 0.2338539347714848, 0.23302595025963255, 0.23233351124657525, 0.23176753206385506, 0.23164456748300127, 0.23084442373779085, 0.2307105729315016, 0.2303344397743543, 0.22946627746025722, 0.22895418372419146, 0.228928166727225, 0.22827514837185542, 0.2281792085700565, 0.2275813293788168, 0.22750271668036778, 0.22690622293286852, 0.22695632795492807, 0.22639644417497848, 0.22640104227595859, 0.2258278524544504, 0.2259762724240621, 0.2253545899854766, 0.2254464763734076, 0.2249138335055775, 0.22497444868087768, 0.22431671284966997, 0.22461120711432564, 0.22397915803723864, 0.22407251712348725, 0.22388929933309554, 0.22341678228643205, 0.22336234851015938, 0.2228272415863143, 0.22316995352506638, 0.22250012440813913, 0.22251838617854647, 0.22246968809101317, 0.22195830053753324, 0.2219521278474066, 0.22196920646561516, 0.22141642497645483, 0.22146092338694467, 0.22146253493097093, 0.22096424688895544, 0.2209689610865381, 0.2210592728522089, 0.22050989502006108, 0.2203720924920506, 0.22054756893051994, 0.22008680353562038, 0.22018635749816895, 0.22025140616628858, 0.2197652022375001, 0.21989461653762393, 0.21987197038200165, 0.2194620959626304, 0.21958098202943802, 0.2192221227619383, 0.21948471817705367, 0.21885855204529234, 0.21910263508558273, 0.21905701809459263, 0.2184864443209436, 0.2187534546189838, 0.21869370394282872, 0.21816031379832163, 0.21837043321794933, 0.21831568823920355, 0.21780623257160187, 0.2180536413855023, 0.21751420381996367, 0.2180790725019243, 0.2174637348453204, 0.21753024286693998, 0.21712573289871215, 0.21738329115841123, 0.21686113443639543, 0.2170203298661444, 0.21654318352540333, 0.2168577661779192, 0.21642195105552672, 0.2165562622745832, 0.21610226780176162, 0.21638136128584542, 0.21584899445374806, 0.21605149974425633, 0.2155392543474833, 0.21580601414044698, 0.21534984439611435, 0.21551500899924173, 0.21509182830651602, 0.21532080339060888, 0.21491187036037446, 0.2146587923169136, 0.2149439188506868, 0.21497897571987576, 0.2145422899391916, 0.21423700077666177, 0.21464829746219846, 0.21416932043102052, 0.21428584926658206, 0.2139026630587048, 0.2143537457784017, 0.2137716140018569, 0.21393815010786058]\n",
            "[0.23197777569293976, 0.2305595725774765, 0.23058710992336273, 0.2297511100769043, 0.22998669743537903, 0.22926531732082367, 0.22901634871959686, 0.22750885784626007, 0.22834831476211548, 0.22630399465560913, 0.22669903934001923, 0.22602587938308716, 0.22493375837802887, 0.22549675405025482, 0.2252175360918045, 0.2242533564567566, 0.2245713621377945, 0.2230614721775055, 0.22385941445827484, 0.22207407653331757, 0.22290350496768951, 0.22160960733890533, 0.2218313217163086, 0.22157521545886993, 0.22230680286884308, 0.22203458845615387, 0.22164198756217957, 0.22169622778892517, 0.2216799408197403, 0.22046054899692535, 0.22141271829605103, 0.22010797262191772, 0.22103209793567657, 0.22027906775474548, 0.2196304351091385, 0.22076556086540222, 0.22020041942596436, 0.22066418826580048, 0.2195034921169281, 0.4902668297290802, 0.36373692750930786, 0.22838981449604034, 0.22937767207622528, 0.22585240006446838, 0.2264360934495926, 0.2250393033027649, 0.22455225884914398, 0.22342045605182648, 0.22302506864070892, 0.22357645630836487, 0.22255702316761017, 0.22243428230285645, 0.22178499400615692, 0.22072875499725342, 0.22046606242656708, 0.22075366973876953, 0.21989849209785461, 0.22022269666194916, 0.2194456160068512, 0.21958905458450317, 0.21896857023239136, 0.21912918984889984, 0.2187521755695343, 0.21867527067661285, 0.2182239592075348, 0.21889927983283997, 0.2180318683385849, 0.2184954434633255, 0.21757306158542633, 0.21793989837169647, 0.21740983426570892, 0.2170863151550293, 0.21677610278129578, 0.21729816496372223, 0.21683697402477264, 0.21608556807041168, 0.21624550223350525, 0.21637481451034546, 0.21564409136772156, 0.21553513407707214, 0.2158152312040329, 0.21599139273166656, 0.21537555754184723, 0.21560606360435486, 0.21500006318092346, 0.21503454446792603, 0.21531341969966888, 0.21522147953510284, 0.2147401124238968, 0.2147163599729538, 0.21472711861133575, 0.21415868401527405, 0.2135428637266159, 0.21389435231685638, 0.21342551708221436, 0.21388347446918488, 0.2136956751346588, 0.21358196437358856, 0.2135857343673706, 0.2141384333372116, 0.2137133628129959, 0.21380627155303955, 0.2132035493850708, 0.21372413635253906, 0.2133156657218933, 0.21302197873592377, 0.2135368436574936, 0.21335548162460327, 0.21293304860591888, 0.21287520229816437, 0.2126486897468567, 0.21257585287094116, 0.21259905397891998, 0.2126065492630005, 0.21227477490901947, 0.21183952689170837, 0.21150118112564087, 0.21131367981433868, 0.2116648554801941, 0.21109949052333832, 0.21141542494297028, 0.21123453974723816, 0.2112291157245636, 0.21123650670051575, 0.21083758771419525, 0.21092723309993744, 0.21067939698696136, 0.21066591143608093, 0.21066828072071075, 0.2108701765537262, 0.21048423647880554, 0.21070295572280884, 0.21030572056770325, 0.21043379604816437, 0.21029643714427948, 0.21029144525527954, 0.21023255586624146, 0.2103276252746582, 0.20985352993011475, 0.20974741876125336, 0.21000054478645325, 0.20990589261054993, 0.20975705981254578, 0.20952118933200836, 0.20918573439121246, 0.20932018756866455, 0.2089819461107254, 0.2090628743171692, 0.20888929069042206, 0.20887859165668488]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(y_test, outputs, markersize = 1)\n",
        "plt.xlabel('Actual Values')\n",
        "plt.ylabel('Predicted Values')\n",
        "plt.title('Regression: Actual vs Predicted')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "GsGUCVSufb4p",
        "outputId": "3afc405a-4980-439f-8318-7b2a83fea5dd"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(train_loss)\n",
        "plt.plot(test_loss)\n",
        "plt.legend()\n",
        "plt.xlabel('Iterations')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Loss vs Iterations')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "KEmxdSCKoBdy"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
